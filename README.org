* Raspberry Pi Nexa Switch

Note: This program has only been tested on a Raspberry Pi 1 Model B.

** Compile the project

Run the following command in the =nexa= directory to build the project:

#+BEGIN_SRC bash
gcc nexa.c nexalib/nexalib.c nexalib/gpio.c -std=gnu99 -o nexa
#+END_SRC

** How to use the program

Currently the program supports up to three devices but there are no problems to
add many more devices. Note that you need to run the command as root in order to
have permissions to use the gpio pins. To turn on or off a channel you run:

#+BEGIN_SRC bash
# sudo ./nexa <channel> <on|off>
# e.g.

sudo ./nexa 1 on # Will turn on device number one
#+END_SRC

In order to send a command to all devices in the group you run:

#+BEGIN_SRC bash
# sudo ./nexa group <on|off>
# e.g.

sudo ./nexa group on # Turn on all devices
#+END_SRC

** Hardware
*** You need
Mandatory
- 433 MHz Transmitter
- 1 MOhm resistor

Optional (only if you need to read a signal)
- 433 MHz Receiver
- Double ended 3,5 mm cable (use a speaker cable!)

** How it works

The data is encoded on the wire (aerial) as a Manchester code.

A latch of 275us high, 2675us low is sent before the data.
There is a gap of 10ms between each message.

0 = holding the line high for 275us then low for 275us.\\
1 = holding the line high for 275us then low for 1225us.

If this script does not detect your signals try relaxing the timing conditions
as the timing seems to vary between devices. Just change the ~SLEEP_NS~ variable
in ~contstants.h~.

Each actual bit of data is encoded as two bits on the wire as:\\
Data 0 = Wire 01\\
Data 1 = Wire 10

The actual message is 32 bits of data (64 wire bits):\\
bits 0-25: the group code - a 26bit number assigned to controllers.\\
bit 26: group flag\\
bit 27: on/off flag\\
bits 28-31: the device code - a 4bit number.

The group flag just seems to be a separate set of addresses you can program
devices to and doesn't trigger the dim cycle when sending two ONs.

** Apache setup

Install apache server

#+BEGIN_SRC bash
sudo apt-get install apache2
#+END_SRC

Enable apache cgi module and restart the web server

#+BEGIN_SRC bash
sudo a2enmod cgi
sudo systemctl restart apache2
#+END_SRC

#+BEGIN_SRC bash
sudo mkdir /var/www/html/cgi-bin
#+END_SRC

Modify ~/etc/apache2/sites-available/000-default.conf~ so it looks like

#+BEGIN_SRC
<VirtualHost *:80>
        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/html

        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined

        # Added config not in default file
        ScriptAlias "/cgi-bin/" "/var/www/html/cgi-bin/"
</VirtualHost>
#+END_SRC

Move the file in ~web/switch_cgi~ to ~/var/www/html/cgi-bin/~ and set the
permissions to ~rwxr-xr-x~

#+BEGIN_SRC bash
chmod 755 switch_cgi
#+END_SRC

Also move the compile ~nexa~ binary into ~/var/www/html/cgi-bin/~. Make sure
it's owned by root and set the suid bit (so it's run as the root)

#+BEGIN_SRC bash
chmod u+s nexa
#+END_SRC

Move the file in ~web/index.html~ to ~/var/www/html/~ and restart the web server

#+BEGIN_SRC bash
sudo systemctl restart apache2
#+END_SRC

Open a browser, type in the raspberrys ip and click the buttons
